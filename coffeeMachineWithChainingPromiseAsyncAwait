const state = {
    stock: {
        coffeeBeans: 250,
        water: 1000,
    },
    isCoffeeMachineBusy: false
};

const checkAvailability = () => {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            if (!state.isCoffeeMachineBusy) {
                resolve("Mesin kopi siap digunakan.");
            } else {
                reject("Maaf, mesin sedang sibuk");
            }
        }, 2000);
    })
}
    

const checkStock = () => {
    return new Promise((resolve, reject) => {
        state.isCoffeeMachineBusy = true;
        setTimeout(() => {
            if (state.stock.coffeeBeans >= 16 && state.stock.water >= 250) {
                resolve("Stok cukup. Bisa membuat kopi");
            } else {
                reject("Stok tidak cukup");
            }
        }, 3000);
    })
}

const boilWater = () => {
    console.log("Sedang memanaskan air...")
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve("Air panas sudah siap!");
        }, 5000);
    })
}

const grindCoffeBeans = () => {
    console.log("Sedang menggiling biji kopi");
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve("Bubuk kopi sudah siap!");
        }, 3000);
    })
}

const brewCoffee = () => {
    console.log("Sedang membuatkan kopi Anda...");
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve("Kopi sudah siap!");
        }, 10000);
    })
}

async function makeEspresso(){
    try{
        await checkAvailability();
        await checkStock();
        await Promise.all([boilWater(), grindCoffeBeans()]);
        const coffee = await brewCoffee();
        console.log(coffee);
    } catch(rejectedReason{
        console.log(rejectReason);
    }
}


makeEspresso();
